using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace CrispyWaffle.Tests.Serialization;

/// <summary>
/// Class
/// </summary>
[ExcludeFromCodeCoverage]
public static class TestObjects
{
    /// <summary>
    /// Generates a new instance of <see cref="SampleXmlClass"/> with populated properties.
    /// </summary>
    /// <returns>A new instance of <see cref="SampleXmlClass"/> containing a random code, a unique correlation ID, a predefined string, and strong typing data.</returns>
    /// <remarks>
    /// This method creates a unique correlation ID using <see cref="Guid.NewGuid"/> and generates a random integer code between 1 and 99999.
    /// It also assigns a predefined string value of "Some text" to the String property of the <see cref="SampleXmlClass"/>.
    /// Additionally, it calls the <see cref="GetStrongTyping(Guid)"/> method to populate the StrongTyping property with data associated with the generated correlation ID.
    /// The resulting <see cref="SampleXmlClass"/> instance can be used for various purposes, such as logging or tracking operations in an application.
    /// </remarks>
    public static SampleXmlClass GetSampleXml()
    {
        var correlationId = Guid.NewGuid();
        return new SampleXmlClass
        {
            Code = new Random().Next(1, 99999),
            CorrelationId = correlationId,
            String = "Some text",
            StrongTyping = GetStrongTyping(correlationId),
        };
    }

    /// <summary>
    /// Creates a new instance of <see cref="StrongTypingClass"/> with specified properties.
    /// </summary>
    /// <param name="correlationId">The unique identifier used for correlation purposes.</param>
    /// <returns>A new instance of <see cref="StrongTypingClass"/> initialized with the provided correlation ID, the current date and time, and a formatted string representation of today's date.</returns>
    /// <remarks>
    /// This method constructs a <see cref="StrongTypingClass"/> object by setting its properties:
    /// - <paramref name="correlationId"/> is assigned to the CorrelationId property.
    /// - The Date property is set to the current date and time using <see cref="DateTime.Now"/>.
    /// - The SomeText property is populated with a string representation of today's date formatted as RFC1123 using <see cref="DateTime.Today.ToString(string)"/>.
    /// This allows for easy tracking and identification of instances created with this method.
    /// </remarks>
    public static StrongTypingClass GetStrongTyping(Guid correlationId) =>
        new StrongTypingClass
        {
            CorrelationId = correlationId,
            Date = DateTime.Now,
            SomeText = DateTime.Today.ToString("R"),
        };

    /// <summary>
    /// Creates and returns a new instance of <see cref="SampleJsonClass"/> populated with sample data.
    /// </summary>
    /// <returns>A <see cref="SampleJsonClass"/> object containing the current date, a new unique identifier, and a list of strong typing classes.</returns>
    /// <remarks>
    /// This method initializes a new <see cref="SampleJsonClass"/> instance with the following properties:
    /// - <paramref name="Date"/> is set to the current date and time using <see cref="DateTime.Now"/>.
    /// - <paramref name="Id"/> is assigned a new globally unique identifier (GUID) generated by <see cref="Guid.NewGuid"/>.
    /// - <paramref name="ListStrong"/> is populated with three instances of <see cref="StrongTypingClass"/>.
    /// The first instance is created with an empty GUID, while the other two are created with newly generated GUIDs.
    /// This method is useful for generating sample data for testing or demonstration purposes.
    /// </remarks>
    public static SampleJsonClass GetSampleJson() =>
        new SampleJsonClass
        {
            Date = DateTime.Now,
            Id = Guid.NewGuid(),
            ListStrong = new List<StrongTypingClass>
            {
                GetStrongTyping(Guid.Empty),
                GetStrongTyping(Guid.NewGuid()),
                GetStrongTyping(Guid.NewGuid()),
            },
        };

    /// <summary>
    /// Gets the sample json not strict.
    /// </summary>
    /// <returns>SampleJsonNotStrictClass.</returns>
    public static SampleJsonNotStrictClass GetSampleJsonNotStrict() =>
        new SampleJsonNotStrictClass { Date = DateTime.Now };

    /// <summary>
    /// Gets the non-serializable.
    /// </summary>
    /// <returns>SampleNonSerializableClass.</returns>
    internal static SampleNonSerializableClass GetNonSerializable() =>
        new SampleNonSerializableClass { Date = DateTime.Now };

    /// <summary>
    /// Gets the enumerable json.
    /// </summary>
    /// <returns>IEnumerable&lt;SampleXmlClass&gt;.</returns>
    public static IEnumerable<SampleXmlClass> GetEnumerableJson()
    {
        for (var i = 0; i < 1; i++)
        {
            yield return GetSampleXml();
        }
    }
}
