{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Crispy Waffle Project A comprehensive toolkit designed to enhance .NET projects with a variety of functionalities. This project is proudly maintained by @guibranco . Source code available at: GitHub . Currently opened issues: . Project Status Build Status Last Commit Tests Coverage Code Smells Lines of Code Features Crispy Waffle provides a rich set of features to enhance your .NET applications: Caching Efficiently cache data to improve performance. Example Usage: var cache = new CacheProvider(); cache.Set(\"key\", \"value\", TimeSpan.FromMinutes(10)); var value = cache.Get<string>(\"key\"); Communication FTP Client Manage file transfers using the FTP protocol. Example Usage: var ftpClient = new FtpClient(\"ftp://example.com\", \"username\", \"password\"); ftpClient.Upload(\"localFile.txt\", \"remoteFile.txt\"); SMTP Mailer Client Send emails easily via SMTP. Example Usage: var mailer = new SmtpMailer(\"smtp.example.com\", \"username\", \"password\"); mailer.Send(\"to@example.com\", \"Subject\", \"Email body\"); Conversion Extensions Simplify data type conversions. Example Usage: int number = \"123\".ToInt(); Events Dispatching Trigger and manage application events. Example Usage: var eventDispatcher = new EventDispatcher(); eventDispatcher.Subscribe<MyEvent>(e => Console.WriteLine(e.Message)); eventDispatcher.Dispatch(new MyEvent(\"Hello, World!\")); Logging Capture logs for debugging and monitoring. Example Usage: var logger = new Logger(); logger.Log(\"This is a log message.\"); Messaging Implement messaging patterns for inter-component communication. Example Usage: var messageBus = new MessageBus(); messageBus.Publish(new MyMessage(\"Hello!\")); Scheduled Task Execution Automate execution of tasks at intervals. Example Usage: var scheduler = new TaskScheduler(); scheduler.Schedule(() => Console.WriteLine(\"Task executed!\"), TimeSpan.FromMinutes(1)); Serialization Helpers Serialize and deserialize data in JSON and XML formats. Example Usage: var jsonData = JsonSerializer.Serialize(new { Name = \"Crispy Waffle\" }); var obj = JsonSerializer.Deserialize<MyClass>(jsonData); Service Locator Acts as a Dependency Injection and IoC container. Example Usage: var serviceLocator = new ServiceLocator(); serviceLocator.Register<IService, ServiceImpl>(); var service = serviceLocator.Get<IService>(); String Extensions Enhance string manipulation capabilities. Example Usage: string example = \"Crispy Waffle\"; bool containsWaffle = example.Contains(\"Waffle\"); Examples Most methods are thoroughly tested, and usage examples can be found in the test project source code . This resource provides practical demonstrations of each feature in action. Class Diagram The following class diagram illustrates the architecture and relationships within the Crispy Waffle project:","title":"Crispy Waffle Project"},{"location":"#crispy-waffle-project","text":"A comprehensive toolkit designed to enhance .NET projects with a variety of functionalities. This project is proudly maintained by @guibranco . Source code available at: GitHub . Currently opened issues: .","title":"Crispy Waffle Project"},{"location":"#project-status","text":"Build Status Last Commit Tests Coverage Code Smells Lines of Code","title":"Project Status"},{"location":"#features","text":"Crispy Waffle provides a rich set of features to enhance your .NET applications:","title":"Features"},{"location":"#caching","text":"Efficiently cache data to improve performance. Example Usage: var cache = new CacheProvider(); cache.Set(\"key\", \"value\", TimeSpan.FromMinutes(10)); var value = cache.Get<string>(\"key\");","title":"Caching"},{"location":"#communication","text":"","title":"Communication"},{"location":"#ftp-client","text":"Manage file transfers using the FTP protocol. Example Usage: var ftpClient = new FtpClient(\"ftp://example.com\", \"username\", \"password\"); ftpClient.Upload(\"localFile.txt\", \"remoteFile.txt\");","title":"FTP Client"},{"location":"#smtp-mailer-client","text":"Send emails easily via SMTP. Example Usage: var mailer = new SmtpMailer(\"smtp.example.com\", \"username\", \"password\"); mailer.Send(\"to@example.com\", \"Subject\", \"Email body\");","title":"SMTP Mailer Client"},{"location":"#conversion-extensions","text":"Simplify data type conversions. Example Usage: int number = \"123\".ToInt();","title":"Conversion Extensions"},{"location":"#events-dispatching","text":"Trigger and manage application events. Example Usage: var eventDispatcher = new EventDispatcher(); eventDispatcher.Subscribe<MyEvent>(e => Console.WriteLine(e.Message)); eventDispatcher.Dispatch(new MyEvent(\"Hello, World!\"));","title":"Events Dispatching"},{"location":"#logging","text":"Capture logs for debugging and monitoring. Example Usage: var logger = new Logger(); logger.Log(\"This is a log message.\");","title":"Logging"},{"location":"#messaging","text":"Implement messaging patterns for inter-component communication. Example Usage: var messageBus = new MessageBus(); messageBus.Publish(new MyMessage(\"Hello!\"));","title":"Messaging"},{"location":"#scheduled-task-execution","text":"Automate execution of tasks at intervals. Example Usage: var scheduler = new TaskScheduler(); scheduler.Schedule(() => Console.WriteLine(\"Task executed!\"), TimeSpan.FromMinutes(1));","title":"Scheduled Task Execution"},{"location":"#serialization-helpers","text":"Serialize and deserialize data in JSON and XML formats. Example Usage: var jsonData = JsonSerializer.Serialize(new { Name = \"Crispy Waffle\" }); var obj = JsonSerializer.Deserialize<MyClass>(jsonData);","title":"Serialization Helpers"},{"location":"#service-locator","text":"Acts as a Dependency Injection and IoC container. Example Usage: var serviceLocator = new ServiceLocator(); serviceLocator.Register<IService, ServiceImpl>(); var service = serviceLocator.Get<IService>();","title":"Service Locator"},{"location":"#string-extensions","text":"Enhance string manipulation capabilities. Example Usage: string example = \"Crispy Waffle\"; bool containsWaffle = example.Contains(\"Waffle\");","title":"String Extensions"},{"location":"#examples","text":"Most methods are thoroughly tested, and usage examples can be found in the test project source code . This resource provides practical demonstrations of each feature in action.","title":"Examples"},{"location":"#class-diagram","text":"The following class diagram illustrates the architecture and relationships within the Crispy Waffle project:","title":"Class Diagram"},{"location":"changelog/","text":"Changelog Version 10.0 [2025-02-22] Drop support to .NET 6 - pull request #667 Version 9.1 [] TBC Version 9.0 [] TBC Version 8.2 [2024-09-11] Implement CouchDB cache - issue #499 and pull request #544 by @Mohammad-Haris Version 8.1 [2024-08-08] Implement rolling text file log adapter - issue #37 and pull request #479 by @Mohammad-Haris Version 8.0 [2024-07-28] Replace NEST and ElasticSearch.Net with Elastic.Clients.Elasticsearch - issue #444 and pull request #470 by @Mohammad-Haris Remove binary serializer - issue #462 and pull request #463 by @Mohammad-Haris Version 7.0 [2024-07-21] Rename LifeStyle to Lifetime - pull request #445 Fix build warnings Version 6.0 [2024-05-20] Create i18n package - PT-BR - issue #315 Version 5.0 [2024-01-31] Replaced MD5CryptoServiceProvider to MD5.Create - issue #155 by @tiagoschaffer Add System.Text.Json serialization - issue #192 by @Looseling Version 4.3 [2023-10-28] Remove retry rules from FtpClient - issue #211 by @Yousef-Majidi Create BaseSerializerAdapter - issue #185 Adjust namespaces Fix some code smells Version 4.2 [2023-07-24] Fix SonarCloud reports - issue #182 by @viktoriussuwandi Fix security in GitHub Actions and AppVeyor pipeline Add CSharpier (Linter) Add DeepSource scanner Version 4.1 [2023-03-22] Add Utils project - issue #150 Version 4.0 [2023-03-22] Add NuGet README.md - issue #139 Version 3.1 [2022-09-10] Add CrispyWaffle.ElasticSearch project & package - issue #119 . Version 3.0 [2022-09-09] Upgrade dependencies and increase unit test coverage. Version 2.5 [2020-09-07] Add CrispyWaffle.RabbitMQ project & package - issue #92 . Version 2.4 [2020-09-06] Add CrispyWaffle.Redis project & package. Add documentation for caching. Version 2.3 [2020-09-06] Add FailoverExceptionHandler class - issue #73 . Add Environment Helper class - issue #75 . Version 2.2 [2020-09-05] Add a scheduler feature. Add documentation using MkDocs. Version 2.1 [2020-09-04] Add the Configuration project and package. Add Mustache template engine (inspired by Mustache/Handlebars). Add Resource template repository. Add Elmah & Log4Net projects (logging). Basic usage examples. Version 2.0 [2020-08-03] Removed some application-specific patterns from the StringExtensions class Version 1.3 [2020-07-24] Add EvenLogProvider and EventLogAdapter. Add log Trace methods that support exceptions. Add Fatal log level. Version 1.2 [2020-03-28] Add some unit tests. Update appveyor.yml with build enhancements and test coverages. Update readme template. Version 1.1 [2019-09-27] Add Math Extensions (CrispyWaffle.Extensions.MathExtensions namespace). Add Personal Data Validations (CrispyWaffle.Validations.PersonalDataValidations). Rename method FormatDocument to FormatBrazilianDocument (CrispyWaffle.Extensions.ConversionExtensions). Rename method ParsePhoneNumber to arseBrazilianPhoneNumber (CrispyWaffle.Extensions.ConversionExtensions). Removed CleanListItems (CrispyWaffle.Extensions.ConversionExtensions). Rename method TryParsePhoneNumber to TryParseBrazilianPhoneNumber (CrispyWaffle.Extensions.ConversionExtensions). Removed CleanListItems and ToListString (CrispyWaffle.Extensions.ConversionExtensions) (Specific to application patterns) .","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#version-100-2025-02-22","text":"Drop support to .NET 6 - pull request #667","title":"Version 10.0 [2025-02-22]"},{"location":"changelog/#version-91","text":"TBC","title":"Version 9.1 []"},{"location":"changelog/#version-90","text":"TBC","title":"Version 9.0 []"},{"location":"changelog/#version-82-2024-09-11","text":"Implement CouchDB cache - issue #499 and pull request #544 by @Mohammad-Haris","title":"Version 8.2 [2024-09-11]"},{"location":"changelog/#version-81-2024-08-08","text":"Implement rolling text file log adapter - issue #37 and pull request #479 by @Mohammad-Haris","title":"Version 8.1 [2024-08-08]"},{"location":"changelog/#version-80-2024-07-28","text":"Replace NEST and ElasticSearch.Net with Elastic.Clients.Elasticsearch - issue #444 and pull request #470 by @Mohammad-Haris Remove binary serializer - issue #462 and pull request #463 by @Mohammad-Haris","title":"Version 8.0 [2024-07-28]"},{"location":"changelog/#version-70-2024-07-21","text":"Rename LifeStyle to Lifetime - pull request #445 Fix build warnings","title":"Version 7.0 [2024-07-21]"},{"location":"changelog/#version-60-2024-05-20","text":"Create i18n package - PT-BR - issue #315","title":"Version 6.0 [2024-05-20]"},{"location":"changelog/#version-50-2024-01-31","text":"Replaced MD5CryptoServiceProvider to MD5.Create - issue #155 by @tiagoschaffer Add System.Text.Json serialization - issue #192 by @Looseling","title":"Version 5.0 [2024-01-31]"},{"location":"changelog/#version-43-2023-10-28","text":"Remove retry rules from FtpClient - issue #211 by @Yousef-Majidi Create BaseSerializerAdapter - issue #185 Adjust namespaces Fix some code smells","title":"Version 4.3 [2023-10-28]"},{"location":"changelog/#version-42-2023-07-24","text":"Fix SonarCloud reports - issue #182 by @viktoriussuwandi Fix security in GitHub Actions and AppVeyor pipeline Add CSharpier (Linter) Add DeepSource scanner","title":"Version 4.2 [2023-07-24]"},{"location":"changelog/#version-41-2023-03-22","text":"Add Utils project - issue #150","title":"Version 4.1 [2023-03-22]"},{"location":"changelog/#version-40-2023-03-22","text":"Add NuGet README.md - issue #139","title":"Version 4.0 [2023-03-22]"},{"location":"changelog/#version-31-2022-09-10","text":"Add CrispyWaffle.ElasticSearch project & package - issue #119 .","title":"Version 3.1 [2022-09-10]"},{"location":"changelog/#version-30-2022-09-09","text":"Upgrade dependencies and increase unit test coverage.","title":"Version 3.0 [2022-09-09]"},{"location":"changelog/#version-25-2020-09-07","text":"Add CrispyWaffle.RabbitMQ project & package - issue #92 .","title":"Version 2.5 [2020-09-07]"},{"location":"changelog/#version-24-2020-09-06","text":"Add CrispyWaffle.Redis project & package. Add documentation for caching.","title":"Version 2.4 [2020-09-06]"},{"location":"changelog/#version-23-2020-09-06","text":"Add FailoverExceptionHandler class - issue #73 . Add Environment Helper class - issue #75 .","title":"Version 2.3 [2020-09-06]"},{"location":"changelog/#version-22-2020-09-05","text":"Add a scheduler feature. Add documentation using MkDocs.","title":"Version 2.2 [2020-09-05]"},{"location":"changelog/#version-21-2020-09-04","text":"Add the Configuration project and package. Add Mustache template engine (inspired by Mustache/Handlebars). Add Resource template repository. Add Elmah & Log4Net projects (logging). Basic usage examples.","title":"Version 2.1 [2020-09-04]"},{"location":"changelog/#version-20-2020-08-03","text":"Removed some application-specific patterns from the StringExtensions class","title":"Version 2.0 [2020-08-03]"},{"location":"changelog/#version-13-2020-07-24","text":"Add EvenLogProvider and EventLogAdapter. Add log Trace methods that support exceptions. Add Fatal log level.","title":"Version 1.3 [2020-07-24]"},{"location":"changelog/#version-12-2020-03-28","text":"Add some unit tests. Update appveyor.yml with build enhancements and test coverages. Update readme template.","title":"Version 1.2 [2020-03-28]"},{"location":"changelog/#version-11-2019-09-27","text":"Add Math Extensions (CrispyWaffle.Extensions.MathExtensions namespace). Add Personal Data Validations (CrispyWaffle.Validations.PersonalDataValidations). Rename method FormatDocument to FormatBrazilianDocument (CrispyWaffle.Extensions.ConversionExtensions). Rename method ParsePhoneNumber to arseBrazilianPhoneNumber (CrispyWaffle.Extensions.ConversionExtensions). Removed CleanListItems (CrispyWaffle.Extensions.ConversionExtensions). Rename method TryParsePhoneNumber to TryParseBrazilianPhoneNumber (CrispyWaffle.Extensions.ConversionExtensions). Removed CleanListItems and ToListString (CrispyWaffle.Extensions.ConversionExtensions) (Specific to application patterns) .","title":"Version 1.1 [2019-09-27]"},{"location":"contributing/","text":"Contributing Refer to CONTRIBUTING.md to learn how to contribute to this project! Contributors Guilherme Branco Stracini Mohammad Haris Batyrkhan Akzholov Doan Duc Daii Jo\u00e3o V\u00edtor Valadares Simran Gill Thiago Christopher Tiago Sch\u00e4ffer Viktorius Suwandi Yousef akhtareimon mf0zz13 Bots dependabot[bot] github-actions[bot] deepsource-autofix[bot] penify-dev[bot] gitauto-ai[bot] stack-file[bot] codefactor-io[bot] Snyk bot","title":"Contributing"},{"location":"contributing/#contributing","text":"Refer to CONTRIBUTING.md to learn how to contribute to this project!","title":"Contributing"},{"location":"contributing/#contributors","text":"Guilherme Branco Stracini Mohammad Haris Batyrkhan Akzholov Doan Duc Daii Jo\u00e3o V\u00edtor Valadares Simran Gill Thiago Christopher Tiago Sch\u00e4ffer Viktorius Suwandi Yousef akhtareimon mf0zz13","title":"Contributors"},{"location":"contributing/#bots","text":"dependabot[bot] github-actions[bot] deepsource-autofix[bot] penify-dev[bot] gitauto-ai[bot] stack-file[bot] codefactor-io[bot] Snyk bot","title":"Bots"},{"location":"installation/","text":"Installation About The Crispy Waffle project is divided into some packages: Package Description CrispyWaffle The core package, with main features. Configuration Configuration abstractions. ElasticSearch The ElasticSearch extension package. Implements the Elastic Search client and log features. ELMAH The ELMAH exception handler. Redirects the exceptions messages (from LogConsumer.Handle method) to ELMAH. EventLog The event log extension package. Implements the log classes to Windows event log. Log4Net The Log4Net log provider. Redirects the log output to Log4Net. RabbitMQ The RabbitMQ extension package. Implements the RabbitMQ message broker client and log features. Redis The Redis extension package. Implements the Redis cache, log and telemetry features. Utils The utility extension package. Implements the utility classes (communications - FTP client, SMTP mailer). Language packages The following language (i18n) packages are available: Package Description Pt-Br Brazilian Portuguese (PT-BR) Github Releases Download the latest zip file from the Release page. Nuget package manager Package Version Downloads CrispyWaffle CrispyWaffle.Configuration CrispyWaffle.ElasticSearch CrispyWaffle.Elmah CrispyWaffle.EventLog CrispyWaffle.Log4Net CrispyWaffle.RabbitMQ CrispyWaffle.Redis CrispyWaffle.Utils Language packages (i18n) Package Version Downloads CrispyWaffle.I18n.PtBr Package Manager Console (manual) CrispyWaffle Install-Package CrispyWaffle Configuration Install-Package CrispyWaffle.Configuration ElasticSearch Install-Package CrispyWaffle.ElasticSearch ELMAH Install-Package CrispyWaffle.Elmah EventLog Install-Package CrispyWaffle.EventLog Log4Net Install-Package CrispyWaffle.Log4Net RabbitMQ Install-Package CrispyWaffle.RabbitMQ Redis Install-Package CrispyWaffle.Redis Utils Install-Package CrispyWaffle.Utils Language packages PT-BR Install-Package CrispyWaffle.I18n.PtBr","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#about","text":"The Crispy Waffle project is divided into some packages: Package Description CrispyWaffle The core package, with main features. Configuration Configuration abstractions. ElasticSearch The ElasticSearch extension package. Implements the Elastic Search client and log features. ELMAH The ELMAH exception handler. Redirects the exceptions messages (from LogConsumer.Handle method) to ELMAH. EventLog The event log extension package. Implements the log classes to Windows event log. Log4Net The Log4Net log provider. Redirects the log output to Log4Net. RabbitMQ The RabbitMQ extension package. Implements the RabbitMQ message broker client and log features. Redis The Redis extension package. Implements the Redis cache, log and telemetry features. Utils The utility extension package. Implements the utility classes (communications - FTP client, SMTP mailer).","title":"About"},{"location":"installation/#language-packages","text":"The following language (i18n) packages are available: Package Description Pt-Br Brazilian Portuguese (PT-BR)","title":"Language packages"},{"location":"installation/#github-releases","text":"Download the latest zip file from the Release page.","title":"Github Releases"},{"location":"installation/#nuget-package-manager","text":"Package Version Downloads CrispyWaffle CrispyWaffle.Configuration CrispyWaffle.ElasticSearch CrispyWaffle.Elmah CrispyWaffle.EventLog CrispyWaffle.Log4Net CrispyWaffle.RabbitMQ CrispyWaffle.Redis CrispyWaffle.Utils","title":"Nuget package manager"},{"location":"installation/#language-packages-i18n","text":"Package Version Downloads CrispyWaffle.I18n.PtBr","title":"Language packages (i18n)"},{"location":"installation/#package-manager-console-manual","text":"CrispyWaffle Install-Package CrispyWaffle Configuration Install-Package CrispyWaffle.Configuration ElasticSearch Install-Package CrispyWaffle.ElasticSearch ELMAH Install-Package CrispyWaffle.Elmah EventLog Install-Package CrispyWaffle.EventLog Log4Net Install-Package CrispyWaffle.Log4Net RabbitMQ Install-Package CrispyWaffle.RabbitMQ Redis Install-Package CrispyWaffle.Redis Utils Install-Package CrispyWaffle.Utils","title":"Package Manager Console (manual)"},{"location":"installation/#language-packages_1","text":"PT-BR Install-Package CrispyWaffle.I18n.PtBr","title":"Language packages"},{"location":"license/","text":"MIT License Copyright (c) 2019-2024 Guilherme Branco Stracini Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\") to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"user-guide/basic-usage/","text":"Basic Usage Crispy Waffle is a versatile toolkit for .NET projects, offering a wide range of features to simplify development. Below is an overview of the key functionalities available: Features Caching : Efficiently store and retrieve data to enhance application performance. Learn More Communication : FTP Client : Easily manage file transfers using the FTP protocol. SMTP Mailer Client : Send emails seamlessly through SMTP. Conversion Extensions : Simplify data type conversions with helpful extension methods. Events Dispatching : Trigger and manage events in your application. Learn More Logging : Capture and record logs for debugging and monitoring purposes. Learn More Messaging : Implement messaging patterns for inter-component communication. Learn More Scheduled Task Execution : Automate the execution of tasks at defined intervals. Learn More Serialization Helpers : Easily serialize and deserialize data in JSON and XML formats. Service Locator : Acts as a Dependency Injection and Inversion of Control (IoC) container. Learn More String Extensions : Enhance string manipulation capabilities with useful extension methods. Examples Most methods are thoroughly tested, and usage examples can be found in the test project source code . This resource provides practical demonstrations of each feature in action. Class Diagram The following class diagram illustrates the architecture and relationships within the Crispy Waffle project:","title":"Basic Usage"},{"location":"user-guide/basic-usage/#basic-usage","text":"Crispy Waffle is a versatile toolkit for .NET projects, offering a wide range of features to simplify development. Below is an overview of the key functionalities available:","title":"Basic Usage"},{"location":"user-guide/basic-usage/#features","text":"Caching : Efficiently store and retrieve data to enhance application performance. Learn More Communication : FTP Client : Easily manage file transfers using the FTP protocol. SMTP Mailer Client : Send emails seamlessly through SMTP. Conversion Extensions : Simplify data type conversions with helpful extension methods. Events Dispatching : Trigger and manage events in your application. Learn More Logging : Capture and record logs for debugging and monitoring purposes. Learn More Messaging : Implement messaging patterns for inter-component communication. Learn More Scheduled Task Execution : Automate the execution of tasks at defined intervals. Learn More Serialization Helpers : Easily serialize and deserialize data in JSON and XML formats. Service Locator : Acts as a Dependency Injection and Inversion of Control (IoC) container. Learn More String Extensions : Enhance string manipulation capabilities with useful extension methods.","title":"Features"},{"location":"user-guide/basic-usage/#examples","text":"Most methods are thoroughly tested, and usage examples can be found in the test project source code . This resource provides practical demonstrations of each feature in action.","title":"Examples"},{"location":"user-guide/basic-usage/#class-diagram","text":"The following class diagram illustrates the architecture and relationships within the Crispy Waffle project:","title":"Class Diagram"},{"location":"user-guide/caching/","text":"Caching About Cache data is easy with Crispy Waffle, there are available two repositories for cache: MemoryCacheRepository : A cache repository that stores data in application memory. RedisCacheRepository : A cache repository that uses Redis as a persistence mechanism. There is also a helper class, CacheManager that makes cache usage easy. Examples Single cache repository + CacheManager helper class The following example uses the RedisCacheRepository and the CacheManager helper class: Process #1 (write data to cache): ServiceLocator.Register<ICacheRepository, RedisCacheRepository>(LifeStyle.SINGLETON); CacheManager.AddRepository<ICacheRepository>(); CacheManager.Set(\"some string text\", \"MyKey\"); Process #2 (read data from cache - Redis): ServiceLocator.Register<ICacheRepository, RedisCacheRepository>(LifeStyle.SINGLETON); CacheManager.AddRepository<ICacheRepository>(); var cachedValueFromRedis = CacheManager.Get<string>(\"MyKey\"); //some string text Multiple cache repositories (registration precedence) Using multiple cache repositories: ServiceLocator.Register<ICacheRepository, MemoryCacheRepository>(LifeStyle.SINGLETON); ServiceLocator.Register<RedisCacheRepository>(LifeStyle.SINGLETON); CacheManager.AddRepository<ICacheRepository>(); //or directly: CacheManager.AddRepository<MemoryCacheRepository>(); CacheManager.AddRepository<RedisCacheRepository>(); //RedisCacheRepository var cachedValue = CacheManager.Get<string>(\"MyKey\"); //first will lookup in MemoryCacheRepository then RedisCacheRepository var cachedValueFromSpecificRepository = CachemManager.GetFrom<RedisCacheRepository, string>(\"MyKey\"); //will get the value only from RedisCacheRepository.","title":"Caching"},{"location":"user-guide/caching/#caching","text":"","title":"Caching"},{"location":"user-guide/caching/#about","text":"Cache data is easy with Crispy Waffle, there are available two repositories for cache: MemoryCacheRepository : A cache repository that stores data in application memory. RedisCacheRepository : A cache repository that uses Redis as a persistence mechanism. There is also a helper class, CacheManager that makes cache usage easy.","title":"About"},{"location":"user-guide/caching/#examples","text":"","title":"Examples"},{"location":"user-guide/caching/#single-cache-repository-cachemanager-helper-class","text":"The following example uses the RedisCacheRepository and the CacheManager helper class: Process #1 (write data to cache): ServiceLocator.Register<ICacheRepository, RedisCacheRepository>(LifeStyle.SINGLETON); CacheManager.AddRepository<ICacheRepository>(); CacheManager.Set(\"some string text\", \"MyKey\"); Process #2 (read data from cache - Redis): ServiceLocator.Register<ICacheRepository, RedisCacheRepository>(LifeStyle.SINGLETON); CacheManager.AddRepository<ICacheRepository>(); var cachedValueFromRedis = CacheManager.Get<string>(\"MyKey\"); //some string text","title":"Single cache repository + CacheManager helper class"},{"location":"user-guide/caching/#multiple-cache-repositories-registration-precedence","text":"Using multiple cache repositories: ServiceLocator.Register<ICacheRepository, MemoryCacheRepository>(LifeStyle.SINGLETON); ServiceLocator.Register<RedisCacheRepository>(LifeStyle.SINGLETON); CacheManager.AddRepository<ICacheRepository>(); //or directly: CacheManager.AddRepository<MemoryCacheRepository>(); CacheManager.AddRepository<RedisCacheRepository>(); //RedisCacheRepository var cachedValue = CacheManager.Get<string>(\"MyKey\"); //first will lookup in MemoryCacheRepository then RedisCacheRepository var cachedValueFromSpecificRepository = CachemManager.GetFrom<RedisCacheRepository, string>(\"MyKey\"); //will get the value only from RedisCacheRepository.","title":"Multiple cache repositories (registration precedence)"},{"location":"user-guide/commands/","text":"Commands Definition Commands are a way to execute one or more actions based on a class (the command itself). Commands are defined as a simple class inherited from the ICommand interface. Each command can be handled by one and only one of the command handlers. The command handler class inherits from the ICommandHandler<TCommand, TResult> interface and must implement the TResult Handle(TCommand command) . For example, the HelloWorldCommand class, defined below, is a simple class without methods, properties, or fields and is used to trigger HelloWorldCommandHandler : Command class: public class HelloWorldCommand : ICommand {} Command handler class: public class HelloWorldCommandHandler : ICommandHandler<HelloWorldCommand, string> { public string Handle(HelloWorldCommand command) => \"Hello World, this is the result of the triggered command!\"; } To trigger the command handler, just call the CommandsConsumer.Raise method from any part of your code: CommandsConsumer.Raise<HelloWorldCommand, string>(new HelloWorldCommand()); //do other stuff... Examples Returning a class as a result In this example, the command has some properties, and the handler will give the result: // The command class. public class SomeCommand(int quantity) : ICommand { public Guid Id { get; } = Guid.NewGuid(); public DateTime Data { get; } = DateTime.Now; public int Quantity { get; } = quantity; } // The result of the command. public class ResultSomeCommand(int newQuantity) { public int Quantity { get; } = newQuantity; } // The command handler class. Each event can be handled by one and only one handler. public class SomeCommandHandler : ICommandHandler<SomeCommand, ResultSomeCommand> { //constructor of the class, with dependencies... //dependencies are resolved by ServiceLocator. public ResultSomeCommand Handle(SomeCommand command) { LogConsumer.Warning(\"Command 'SomeCommand' handled by 'SomeCommandHandler'. Command Id: {0}\", args.Id); //do any other processing stuff... int newQuantity = RecoveryQuantity(); return new(newQuantity); } } // Program entry point public static class Program { public static void Main(string[] args) { //Initialize the dependencies with ServiceLocator. //Initialize log providers/adapters //... var command = new SomeCommand(10); var result = CommandsConsumer.Raise<SomeCommand, ResultSomeCommand>(command); Console.WriteLine($\"New quantity: {quantity.Quantity}\"); } }","title":"Commands"},{"location":"user-guide/commands/#commands","text":"","title":"Commands"},{"location":"user-guide/commands/#definition","text":"Commands are a way to execute one or more actions based on a class (the command itself). Commands are defined as a simple class inherited from the ICommand interface. Each command can be handled by one and only one of the command handlers. The command handler class inherits from the ICommandHandler<TCommand, TResult> interface and must implement the TResult Handle(TCommand command) . For example, the HelloWorldCommand class, defined below, is a simple class without methods, properties, or fields and is used to trigger HelloWorldCommandHandler : Command class: public class HelloWorldCommand : ICommand {} Command handler class: public class HelloWorldCommandHandler : ICommandHandler<HelloWorldCommand, string> { public string Handle(HelloWorldCommand command) => \"Hello World, this is the result of the triggered command!\"; } To trigger the command handler, just call the CommandsConsumer.Raise method from any part of your code: CommandsConsumer.Raise<HelloWorldCommand, string>(new HelloWorldCommand()); //do other stuff...","title":"Definition"},{"location":"user-guide/commands/#examples","text":"","title":"Examples"},{"location":"user-guide/commands/#returning-a-class-as-a-result","text":"In this example, the command has some properties, and the handler will give the result: // The command class. public class SomeCommand(int quantity) : ICommand { public Guid Id { get; } = Guid.NewGuid(); public DateTime Data { get; } = DateTime.Now; public int Quantity { get; } = quantity; } // The result of the command. public class ResultSomeCommand(int newQuantity) { public int Quantity { get; } = newQuantity; } // The command handler class. Each event can be handled by one and only one handler. public class SomeCommandHandler : ICommandHandler<SomeCommand, ResultSomeCommand> { //constructor of the class, with dependencies... //dependencies are resolved by ServiceLocator. public ResultSomeCommand Handle(SomeCommand command) { LogConsumer.Warning(\"Command 'SomeCommand' handled by 'SomeCommandHandler'. Command Id: {0}\", args.Id); //do any other processing stuff... int newQuantity = RecoveryQuantity(); return new(newQuantity); } } // Program entry point public static class Program { public static void Main(string[] args) { //Initialize the dependencies with ServiceLocator. //Initialize log providers/adapters //... var command = new SomeCommand(10); var result = CommandsConsumer.Raise<SomeCommand, ResultSomeCommand>(command); Console.WriteLine($\"New quantity: {quantity.Quantity}\"); } }","title":"Returning a class as a result"},{"location":"user-guide/events/","text":"Events Definition Events are a way to execute one or more actions based on a class (the event itself). Events are defined as a simple class, inherited from IEvent interface. Each event can be handled by one, two or an infinite number of event handlers. The event handler class inherit from IEventHandler<TEvent> interface and must implement the Handle(TEvent evt) method. The TEvent generic type is the type of IEvent that will be handled. For example, the HelloWorldEvent class, defined below is a simple class without methods, properties or fields and is used to trigger HelloWorldEventHandler : Event class: public class HelloWorldEvent : IEvent {} Event handler class: public class HelloWorldEventHandler : IEventHandler<HelloWorldEvent> { public Handle(HelloWorldEvent evt) { Console.WriteLine(\"Hello World triggered!\"); } } To trigger the event handler just call the EventsConsumer.Raise method from any part of your code: EventsConsumer.Raise(new HelloWorldEvent()); //do other stuff... Each event handler can handle many kinds of events, just need to implement each interface and each method Handle . Event handling is currently done synchronously. There are plans to do an async, issue #XX . Examples Multiple event handlers for the same event A more complex example using Events & EventsHandlers . In this example, there are two event handlers and the event class has some properties: //The event class. public class SomeEvent : IEvent { public SomeEvent(string data) { Id = Guid.NewGuid(); Date = DateTime.Now; Data = data; } public Guid Id { get; } public string Data { get; } public DateTime Date { get; } } //The event handler class. Each event can be handled by N event handlers. public class SomeEventHandler : IEventHandler<SomeEvent> { //constructor of the class, with dependencies... //dependencies are resolved by ServiceLocator. public void Handle(SomeEvent args) { LogConsumer.Warning(\"Event 'SomeEvent' handled by 'SomeEventHandler'. Event Id: {0}\", args.Id); //do any other processing stuff... } } public class AnotherSomeEventHandler : IEventHandler<SomeEvent> { //constructor of the class, with dependencies... //dependencies are resolved by ServiceLocator. public void Handle(SomeEvent args) { LogConsumer.Warning(\"Event 'SomeEvent' handled by 'AnotherSomeEventHandler'. Event Id: {0}\", args.Id); //someOtherDependency.DoSomeStuffWithEvent(args.Id, args.Data); //do any other processing stuff... } } // Program entry point public static class Program { public static void Main(string[] args) { //Initialize the dependencies with ServiceLocator. //Initialize log providers/adapters //... var evt = new SomeEvent (\"Some text passed to all event handlers\"); EventsConsumer.Raise(evt); } }","title":"Events"},{"location":"user-guide/events/#events","text":"","title":"Events"},{"location":"user-guide/events/#definition","text":"Events are a way to execute one or more actions based on a class (the event itself). Events are defined as a simple class, inherited from IEvent interface. Each event can be handled by one, two or an infinite number of event handlers. The event handler class inherit from IEventHandler<TEvent> interface and must implement the Handle(TEvent evt) method. The TEvent generic type is the type of IEvent that will be handled. For example, the HelloWorldEvent class, defined below is a simple class without methods, properties or fields and is used to trigger HelloWorldEventHandler : Event class: public class HelloWorldEvent : IEvent {} Event handler class: public class HelloWorldEventHandler : IEventHandler<HelloWorldEvent> { public Handle(HelloWorldEvent evt) { Console.WriteLine(\"Hello World triggered!\"); } } To trigger the event handler just call the EventsConsumer.Raise method from any part of your code: EventsConsumer.Raise(new HelloWorldEvent()); //do other stuff... Each event handler can handle many kinds of events, just need to implement each interface and each method Handle . Event handling is currently done synchronously. There are plans to do an async, issue #XX .","title":"Definition"},{"location":"user-guide/events/#examples","text":"","title":"Examples"},{"location":"user-guide/events/#multiple-event-handlers-for-the-same-event","text":"A more complex example using Events & EventsHandlers . In this example, there are two event handlers and the event class has some properties: //The event class. public class SomeEvent : IEvent { public SomeEvent(string data) { Id = Guid.NewGuid(); Date = DateTime.Now; Data = data; } public Guid Id { get; } public string Data { get; } public DateTime Date { get; } } //The event handler class. Each event can be handled by N event handlers. public class SomeEventHandler : IEventHandler<SomeEvent> { //constructor of the class, with dependencies... //dependencies are resolved by ServiceLocator. public void Handle(SomeEvent args) { LogConsumer.Warning(\"Event 'SomeEvent' handled by 'SomeEventHandler'. Event Id: {0}\", args.Id); //do any other processing stuff... } } public class AnotherSomeEventHandler : IEventHandler<SomeEvent> { //constructor of the class, with dependencies... //dependencies are resolved by ServiceLocator. public void Handle(SomeEvent args) { LogConsumer.Warning(\"Event 'SomeEvent' handled by 'AnotherSomeEventHandler'. Event Id: {0}\", args.Id); //someOtherDependency.DoSomeStuffWithEvent(args.Id, args.Data); //do any other processing stuff... } } // Program entry point public static class Program { public static void Main(string[] args) { //Initialize the dependencies with ServiceLocator. //Initialize log providers/adapters //... var evt = new SomeEvent (\"Some text passed to all event handlers\"); EventsConsumer.Raise(evt); } }","title":"Multiple event handlers for the same event"},{"location":"user-guide/logging/","text":"Logging Definition The Crispy Waffle provides some log providers/adapters. Default providers: ConsoleLogProvider: Output log to console window. EventLogProvider: Output log using EventLogAdapter . TextFileLogProvider: Output log to a text file in the file system. Log4NetLogProvider: Bridge from CrispyWaffle logging to Log4Net logging. ... Default adapters: StandardConsoleLogAdapter: Colored console output. StandardTextFileLogAdapter: Simple text file output. RollingTextFileLogAdapter: Text file output, rolling to another file every time each reaches a defined size. ... Examples Below are some examples of logging in a simple console application with different adapters. StandardConsoleLogAdapter usage example: static void Main(string[] args) { // Registering the standard console log adapter to be used by the console log provider. ServiceLocator.Register<IConsoleLogAdapter, StandardConsoleLogAdapter>(Lifetime.Singleton); // Registering the null exception handler for the method LogConsumer.Handle, this means that no action will be executed for exceptions handled by LogConsumer. ServiceLocator.Register<IExceptionHandler, NullExceptionHandler>(Lifetime.Singleton); // Adding console provider to LogConsumer, the log provider will use the registered IConsoleLogAdapter. LogConsumer.AddProvider<ConsoleLogProvider>(); LogConsumer.Info(\"Hello world Crispy Waffle\"); LogConsumer.Debug(\"Current time: {0:hh:mm:ss}\", DateTime.Now); LogConsumer.Warning(\"Press any key to close the program!\"); Console.ReadKey(); } RollingTextFileLogAdapter usage example: static void Main(string[] args) { // Registering the rolling text file log adapter to be used by the text file log provider. // It is recommended to keep the fileNameSeed unique for every object in a multi-threaded environment, otherwise the behaviour might be unexpected. ServiceLocator.Register<ITextFileLogAdapter>( () => new RollingTextFileLogAdapter( // Log directory path. AppDomain.CurrentDomain.BaseDirectory, // Logs file name seed or unique identifier \"textFileLogs\", // Max number of messages allowed per file 100, // Max file size along with unit (Unit.KByte, 10), // The type of log file to create LogFileType.Text ), Lifetime.Transient ); // Registering the null exception handler for the method LogConsumer.Handle, this means that no action will be executed for exceptions handled by LogConsumer. ServiceLocator.Register<IExceptionHandler, NullExceptionHandler>(Lifetime.Singleton); // Adding rolling text file log provider to LogConsumer, the log provider will use the registered ITextFileLogAdapter. LogConsumer.AddProvider<TextFileLogProvider>(); LogConsumer.Info(\"Hello world Crispy Waffle\"); LogConsumer.Debug(\"Current time: {0:hh:mm:ss}\", DateTime.Now); LogConsumer.Warning(\"Warning message!\"); Console.ReadKey(); }","title":"Logging"},{"location":"user-guide/logging/#logging","text":"","title":"Logging"},{"location":"user-guide/logging/#definition","text":"The Crispy Waffle provides some log providers/adapters. Default providers: ConsoleLogProvider: Output log to console window. EventLogProvider: Output log using EventLogAdapter . TextFileLogProvider: Output log to a text file in the file system. Log4NetLogProvider: Bridge from CrispyWaffle logging to Log4Net logging. ... Default adapters: StandardConsoleLogAdapter: Colored console output. StandardTextFileLogAdapter: Simple text file output. RollingTextFileLogAdapter: Text file output, rolling to another file every time each reaches a defined size. ...","title":"Definition"},{"location":"user-guide/logging/#examples","text":"Below are some examples of logging in a simple console application with different adapters. StandardConsoleLogAdapter usage example: static void Main(string[] args) { // Registering the standard console log adapter to be used by the console log provider. ServiceLocator.Register<IConsoleLogAdapter, StandardConsoleLogAdapter>(Lifetime.Singleton); // Registering the null exception handler for the method LogConsumer.Handle, this means that no action will be executed for exceptions handled by LogConsumer. ServiceLocator.Register<IExceptionHandler, NullExceptionHandler>(Lifetime.Singleton); // Adding console provider to LogConsumer, the log provider will use the registered IConsoleLogAdapter. LogConsumer.AddProvider<ConsoleLogProvider>(); LogConsumer.Info(\"Hello world Crispy Waffle\"); LogConsumer.Debug(\"Current time: {0:hh:mm:ss}\", DateTime.Now); LogConsumer.Warning(\"Press any key to close the program!\"); Console.ReadKey(); } RollingTextFileLogAdapter usage example: static void Main(string[] args) { // Registering the rolling text file log adapter to be used by the text file log provider. // It is recommended to keep the fileNameSeed unique for every object in a multi-threaded environment, otherwise the behaviour might be unexpected. ServiceLocator.Register<ITextFileLogAdapter>( () => new RollingTextFileLogAdapter( // Log directory path. AppDomain.CurrentDomain.BaseDirectory, // Logs file name seed or unique identifier \"textFileLogs\", // Max number of messages allowed per file 100, // Max file size along with unit (Unit.KByte, 10), // The type of log file to create LogFileType.Text ), Lifetime.Transient ); // Registering the null exception handler for the method LogConsumer.Handle, this means that no action will be executed for exceptions handled by LogConsumer. ServiceLocator.Register<IExceptionHandler, NullExceptionHandler>(Lifetime.Singleton); // Adding rolling text file log provider to LogConsumer, the log provider will use the registered ITextFileLogAdapter. LogConsumer.AddProvider<TextFileLogProvider>(); LogConsumer.Info(\"Hello world Crispy Waffle\"); LogConsumer.Debug(\"Current time: {0:hh:mm:ss}\", DateTime.Now); LogConsumer.Warning(\"Warning message!\"); Console.ReadKey(); }","title":"Examples"},{"location":"user-guide/messaging/","text":"Messaging Definition The Crispy Waffle provides a set of helpers to send/receive messaging over RabbitMq broker. Examples Send message to a RabbitMq exchage: [ExchangeName(\"rabbitmq-exchange-name\")] [Serializer(SerializerFormat.JSON)] public class SampleItemDto { public Guid Id { get; set; } public string Text { get; set; } public DateTime Date { get; set; } } static void Main(string[] args) { //Registering the RabbitMq connector as a singleton lifecycle. ServiceLocator.Register<RabbitMQConnector>(LifeStyle.SINGLETON); var data = new SampleItemDto { Id = Guid.NewGuid(), Text = \"some random text\", Date = DateTime.Now }; //Gets the wrapper var wrapper = ServiceLocator.Resolve<RabbitMQWrapper>(); //Send to exchange (the exchange name is set via attributes in the SampleItemDto declaration) wrapper.SendToExchange(data); Console.ReadKey(); } Send a message to a RabbitMq queue: [QueueName(\"rabbitmq-queue-name\")] [Serializer(SerializerFormat.JSON)] public class SampleItemDto { public Guid Id { get; set; } public string Text { get; set; } public DateTime Date { get; set; } } static void Main(string[] args) { //Registering the RabbitMq connector as a singleton lifecycle. ServiceLocator.Register<RabbitMQConnector>(LifeStyle.SINGLETON); var data = new SampleItemDto { Id = Guid.NewGuid(), Text = \"some random text\", Date = DateTime.Now }; //Gets the wrapper var wrapper = ServiceLocator.Resolve<RabbitMQWrapper>(); //Send to queue (the queue name is set via attributes in the SampleItemDto declaration) wrapper.SendToQueue(data); Console.ReadKey(); }","title":"Messaging"},{"location":"user-guide/messaging/#messaging","text":"","title":"Messaging"},{"location":"user-guide/messaging/#definition","text":"The Crispy Waffle provides a set of helpers to send/receive messaging over RabbitMq broker.","title":"Definition"},{"location":"user-guide/messaging/#examples","text":"Send message to a RabbitMq exchage: [ExchangeName(\"rabbitmq-exchange-name\")] [Serializer(SerializerFormat.JSON)] public class SampleItemDto { public Guid Id { get; set; } public string Text { get; set; } public DateTime Date { get; set; } } static void Main(string[] args) { //Registering the RabbitMq connector as a singleton lifecycle. ServiceLocator.Register<RabbitMQConnector>(LifeStyle.SINGLETON); var data = new SampleItemDto { Id = Guid.NewGuid(), Text = \"some random text\", Date = DateTime.Now }; //Gets the wrapper var wrapper = ServiceLocator.Resolve<RabbitMQWrapper>(); //Send to exchange (the exchange name is set via attributes in the SampleItemDto declaration) wrapper.SendToExchange(data); Console.ReadKey(); } Send a message to a RabbitMq queue: [QueueName(\"rabbitmq-queue-name\")] [Serializer(SerializerFormat.JSON)] public class SampleItemDto { public Guid Id { get; set; } public string Text { get; set; } public DateTime Date { get; set; } } static void Main(string[] args) { //Registering the RabbitMq connector as a singleton lifecycle. ServiceLocator.Register<RabbitMQConnector>(LifeStyle.SINGLETON); var data = new SampleItemDto { Id = Guid.NewGuid(), Text = \"some random text\", Date = DateTime.Now }; //Gets the wrapper var wrapper = ServiceLocator.Resolve<RabbitMQWrapper>(); //Send to queue (the queue name is set via attributes in the SampleItemDto declaration) wrapper.SendToQueue(data); Console.ReadKey(); }","title":"Examples"},{"location":"user-guide/scheduled-jobs/","text":"Scheduled jobs Definition Scheduler jobs allow scheduling the execution of some method/action using CRON expressions . CRON expression Currently supports the following formats: * : translates to * * * * * ( every minute , every day ). 10 : translates to 10 * * * * (every 10th minute of every hour on every day ). 10 1 * * 0 : runs every 1:10 am of every Sunday */10 : runs at 0, 10, 20, 30, 40 and 50 minutes of every hour on every day . */20 * 10,20,30 * * : runs at 0, 20 and 40 minutes of every hour only on days 10, 20 or 30 of each month, independently of the weekday. Check the Wikipedia's CRON page for more examples and details. Examples Using cron expression to schedule tasks/jobs inside a program. public static class Program { public static void Main(string[] args) { var exampleObj = new SomeClass(); exampleObj.Counter = 10; var jobManager = new JobManager(); jobManager.AddJob(new JobRunner(\"* * * * *\", () => { exampleObj.Counter++; })); jobManager.Start(); Thread.Sleep(120 * 1000); //waits 2 minutes jobManager.Stop(); //stops the manager, so no more execution runs. if(exampleObj.Counter == 12) { LogConsumer.Warning(\"Example job runned for 2 times!\"); } } internal class SomeClass { public int Counter { get; set; } } }","title":"Scheduled jobs"},{"location":"user-guide/scheduled-jobs/#scheduled-jobs","text":"","title":"Scheduled jobs"},{"location":"user-guide/scheduled-jobs/#definition","text":"Scheduler jobs allow scheduling the execution of some method/action using CRON expressions .","title":"Definition"},{"location":"user-guide/scheduled-jobs/#cron-expression","text":"Currently supports the following formats: * : translates to * * * * * ( every minute , every day ). 10 : translates to 10 * * * * (every 10th minute of every hour on every day ). 10 1 * * 0 : runs every 1:10 am of every Sunday */10 : runs at 0, 10, 20, 30, 40 and 50 minutes of every hour on every day . */20 * 10,20,30 * * : runs at 0, 20 and 40 minutes of every hour only on days 10, 20 or 30 of each month, independently of the weekday. Check the Wikipedia's CRON page for more examples and details.","title":"CRON expression"},{"location":"user-guide/scheduled-jobs/#examples","text":"Using cron expression to schedule tasks/jobs inside a program. public static class Program { public static void Main(string[] args) { var exampleObj = new SomeClass(); exampleObj.Counter = 10; var jobManager = new JobManager(); jobManager.AddJob(new JobRunner(\"* * * * *\", () => { exampleObj.Counter++; })); jobManager.Start(); Thread.Sleep(120 * 1000); //waits 2 minutes jobManager.Stop(); //stops the manager, so no more execution runs. if(exampleObj.Counter == 12) { LogConsumer.Warning(\"Example job runned for 2 times!\"); } } internal class SomeClass { public int Counter { get; set; } } }","title":"Examples"},{"location":"user-guide/service-locator/","text":"Service Locator Definition The service locator class is a helper class that acts like an IoC container. You can register instances as singleton/transient scope. Register dependencies and request an instance of an interface/class. Examples The following example registers a singleton class and then requests it multiple times. In this example, the class is instantiated in the first Resolve call public class SingletonTest { public DateTime Date { get; set; } //when creating an instance, set the Date property to DateTime.Now value. public SingletonTest() => Date = DateTime.Now; } static void Main(string[] args) { //Registering ServiceLocator.Register<SingletonTest>(LifeStyle.SINGLETON); var instanceA = ServiceLocator.Resolve<SingletonTest>(); Thread.Sleep(1000); var instanceB = ServiceLocator.Resolve<SingletonTest>(); Thread.Sleep(1000); var instanceC = ServiceLocator.Resolve<SingletonTest>(); //check that all 3 instances have the same Date. } The following creates a new instance for every Resolve call public class TransientTest { public DateTime Date { get; set; } //when creating an instance, set the Date property to DateTime.Now value. public TransientTest() => Date = DateTime.Now; } static void Main(string[] args) { //Registering ServiceLocator.Register<TransientTest>(); var instanceA = ServiceLocator.Resolve<TransientTest>(); Thread.Sleep(1000); var instanceB = ServiceLocator.Resolve<TransientTest>(); Thread.Sleep(1000); var instanceC = ServiceLocator.Resolve<TransientTest>(); //check that all 3 instances have different Date property values. }","title":"Service Locator"},{"location":"user-guide/service-locator/#service-locator","text":"","title":"Service Locator"},{"location":"user-guide/service-locator/#definition","text":"The service locator class is a helper class that acts like an IoC container. You can register instances as singleton/transient scope. Register dependencies and request an instance of an interface/class.","title":"Definition"},{"location":"user-guide/service-locator/#examples","text":"The following example registers a singleton class and then requests it multiple times. In this example, the class is instantiated in the first Resolve call public class SingletonTest { public DateTime Date { get; set; } //when creating an instance, set the Date property to DateTime.Now value. public SingletonTest() => Date = DateTime.Now; } static void Main(string[] args) { //Registering ServiceLocator.Register<SingletonTest>(LifeStyle.SINGLETON); var instanceA = ServiceLocator.Resolve<SingletonTest>(); Thread.Sleep(1000); var instanceB = ServiceLocator.Resolve<SingletonTest>(); Thread.Sleep(1000); var instanceC = ServiceLocator.Resolve<SingletonTest>(); //check that all 3 instances have the same Date. } The following creates a new instance for every Resolve call public class TransientTest { public DateTime Date { get; set; } //when creating an instance, set the Date property to DateTime.Now value. public TransientTest() => Date = DateTime.Now; } static void Main(string[] args) { //Registering ServiceLocator.Register<TransientTest>(); var instanceA = ServiceLocator.Resolve<TransientTest>(); Thread.Sleep(1000); var instanceB = ServiceLocator.Resolve<TransientTest>(); Thread.Sleep(1000); var instanceC = ServiceLocator.Resolve<TransientTest>(); //check that all 3 instances have different Date property values. }","title":"Examples"}]}